name: Build and Release Electron App

on:
  push:
    tags:
      - 'v*' # Trigger this workflow when a new tag like v1.0.0, v1.0.1, etc. is pushed

jobs:
  build:
    runs-on: ${{ matrix.os }} # Run on different OS for each matrix entry

    strategy:
      matrix:
        os: [macos-latest, windows-latest] # Build on macOS for .dmg, Windows for .exe

    steps:
      - name: Checkout code
        uses: actions/checkout@v4 # Use actions/checkout@v4 for better compatibility

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20 # Use a stable Node.js version, like 20.x

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm # Use a direct path for the cache directory for simplicity and robustness
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (root)
        run: npm ci # npm ci is better for CI environments than npm install

      - name: Install React app dependencies
        run: npm ci --prefix app # npm ci is better for CI environments than npm install

      - name: Build React App
        run: npm run build --prefix app

      - name: Create build-app directory (if using custom script)
        run: node scripts/prepare-app.js 2>&1 | tee prepare-app-log.txt
        # Removed 'set -ex' as it's not compatible with PowerShell.
        # Errors from 'node' command will still cause the step to fail.

      - name: Upload prepare-app log (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: prepare-app-script-log
          path: prepare-app-log.txt

      - name: Build Electron App (macOS)
        if: runner.os == 'macOS'
        # Use 'npm run dist --' to use your pre-dist script, then pass --mac etc.
        run: npm run dist -- --mac dmg --universal --publish never
        # --universal for M1/Intel compatible DMG
        # --publish never as we'll manually create release

      - name: Build Electron App (Windows)
        if: runner.os == 'Windows'
        # Use 'npm run dist --' to use your pre-dist script, then pass --win etc.
        run: npm run dist -- --win nsis --x64 --publish never
        # --publish never as we'll manually create release

      - name: Upload Artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build
          path: release/*.dmg # Path to your generated DMG

      - name: Upload Artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: Windows-build
          path: release/*.exe # Path to your generated EXE

  release:
    needs: build # This job depends on the 'build' job
    runs-on: ubuntu-latest # Run this on Ubuntu, it's cheaper/faster for release creation
    if: github.ref_type == 'tag' # Only run this if a new tag was pushed (e.g., v1.0.0)

    permissions:
      contents: write # Needed to create a GitHub Release

    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts # Download all artifacts into an 'artifacts' directory

      - name: Debug: List downloaded artifacts
        run: |
          echo "Listing contents of artifacts/macOS-build/"
          ls -al artifacts/macOS-build/
          echo "Listing contents of artifacts/Windows-build/"
          ls -al artifacts/Windows-build/
          echo "Current working directory:"
          pwd
          echo "Contents of current working directory:"
          ls -al

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2 # Use a community action to create releases
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # GitHub Token for authentication
        with:
          files: |
            artifacts/macOS-build/*.dmg
            artifacts/Windows-build/*.exe # Include Windows EXE if applicable
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: |
            # Password Vault ${{ github.ref_name }}

            This is a new release of the Password Vault application.

            **Features:**
            - Secure master password setup and login
            - Local password storage with strong encryption
            - Add, edit, and delete password entries
            - Copy username and password to clipboard (auto-clears after 15 seconds)
            - Search and filter password entries
            - Forgot Password feature (resets master password and clears old vault data)
            - Light/Dark mode toggle
            - About screen

            **Download below:**
            - `Password Vault.dmg` for macOS
            - `Password Vault Setup.exe` for Windows

            Please report any issues on the GitHub repository.
          draft: false # Set to true if you want to draft the release first
          prerelease: false # Set to true for beta releases
