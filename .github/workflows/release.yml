name: Test Electron App Build and Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Cache Node Modules
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-

      - name: Install dependencies (root)
        run: npm ci

      - name: Install React app dependencies
        run: npm ci --prefix app

      - name: Build React App
        run: npm run build --prefix app

      - name: Create build-app directory (if using custom script)
        run: node scripts/prepare-app.js 2>&1 | tee prepare-app-log.txt

      - name: Upload prepare-app log (on failure)
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: prepare-app-script-log
          path: prepare-app-log.txt

      - name: Build Electron App (macOS)
        if: runner.os == 'macOS'
        run: npm run dist -- --mac dmg --universal --publish never

      - name: Build Electron App (Windows)
        if: runner.os == 'Windows'
        run: npm run dist -- --win nsis --x64 --publish never

      - name: Check macOS release folder
        if: runner.os == 'macOS'
        run: ls -R release

      - name: Check Windows release folder
        if: runner.os == 'Windows'
        run: ls -R release

      - name: Upload Artifacts (macOS)
        if: runner.os == 'macOS'
        uses: actions/upload-artifact@v4
        with:
          name: macOS-build
          path: release/*.dmg

      - name: Upload Artifacts (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: Windows-build
          path: release/*.exe

  release:
    needs: build
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    permissions:
      contents: write
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Debug artifact contents
        run: ls -R artifacts

      - name: Create Release
        id: create_release
        uses: softprops/action-gh-release@v2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            artifacts/macOS-build/*.dmg
            artifacts/Windows-build/*.exe
          name: Release ${{ github.ref_name }}
          tag_name: ${{ github.ref_name }}
          body: "Test Release"
          draft: false
          prerelease: false
